"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ethereumjs-wallet";
exports.ids = ["vendor-chunks/ethereumjs-wallet"];
exports.modules = {

/***/ "(ssr)/./node_modules/ethereumjs-wallet/dist/hdkey.js":
/*!******************************************************!*\
  !*** ./node_modules/ethereumjs-wallet/dist/hdkey.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst index_1 = __importDefault(__webpack_require__(/*! ./index */ \"(ssr)/./node_modules/ethereumjs-wallet/dist/index.js\"));\nconst hdkey_1 = __webpack_require__(/*! ethereum-cryptography/hdkey */ \"(ssr)/./node_modules/ethereum-cryptography/hdkey.js\");\nclass EthereumHDKey {\n    constructor(_hdkey) {\n        this._hdkey = _hdkey;\n    }\n    /**\n     * Creates an instance based on a seed.\n     *\n     * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\n     * create one from a BIP39 mnemonic.\n     */\n    static fromMasterSeed(seedBuffer) {\n        return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\n    }\n    /**\n     * Create an instance based on a BIP32 extended private or public key.\n     */\n    static fromExtendedKey(base58Key) {\n        return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\n    }\n    /**\n     * Returns a BIP32 extended private key (xprv)\n     */\n    privateExtendedKey() {\n        if (!this._hdkey.privateExtendedKey) {\n            throw new Error('This is a public key only wallet');\n        }\n        return this._hdkey.privateExtendedKey;\n    }\n    /**\n     * Return a BIP32 extended public key (xpub)\n     */\n    publicExtendedKey() {\n        return this._hdkey.publicExtendedKey;\n    }\n    /**\n     * Derives a node based on a path (e.g. m/44'/0'/0/1)\n     */\n    derivePath(path) {\n        return new EthereumHDKey(this._hdkey.derive(path));\n    }\n    /**\n     * Derive a node based on a child index\n     */\n    deriveChild(index) {\n        return new EthereumHDKey(this._hdkey.deriveChild(index));\n    }\n    /**\n     * Return a `Wallet` instance as seen above\n     */\n    getWallet() {\n        if (this._hdkey._privateKey) {\n            return index_1.default.fromPrivateKey(this._hdkey._privateKey);\n        }\n        return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\n    }\n}\nexports[\"default\"] = EthereumHDKey;\n//# sourceMappingURL=hdkey.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy13YWxsZXQvZGlzdC9oZGtleS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQyxtQkFBTyxDQUFDLHFFQUFTO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLHdGQUE2QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3hpbWEvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy13YWxsZXQvZGlzdC9oZGtleS5qcz81ZmUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaW5kZXhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9pbmRleFwiKSk7XG5jb25zdCBoZGtleV8xID0gcmVxdWlyZShcImV0aGVyZXVtLWNyeXB0b2dyYXBoeS9oZGtleVwiKTtcbmNsYXNzIEV0aGVyZXVtSERLZXkge1xuICAgIGNvbnN0cnVjdG9yKF9oZGtleSkge1xuICAgICAgICB0aGlzLl9oZGtleSA9IF9oZGtleTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBiYXNlZCBvbiBhIHNlZWQuXG4gICAgICpcbiAgICAgKiBGb3IgdGhlIHNlZWQgd2Ugc3VnZ2VzdCB0byB1c2UgW2JpcDM5XShodHRwczovL25wbWpzLm9yZy9wYWNrYWdlL2JpcDM5KSB0b1xuICAgICAqIGNyZWF0ZSBvbmUgZnJvbSBhIEJJUDM5IG1uZW1vbmljLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTWFzdGVyU2VlZChzZWVkQnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXRoZXJldW1IREtleShoZGtleV8xLkhES2V5LmZyb21NYXN0ZXJTZWVkKHNlZWRCdWZmZXIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGluc3RhbmNlIGJhc2VkIG9uIGEgQklQMzIgZXh0ZW5kZWQgcHJpdmF0ZSBvciBwdWJsaWMga2V5LlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tRXh0ZW5kZWRLZXkoYmFzZTU4S2V5KSB7XG4gICAgICAgIHJldHVybiBuZXcgRXRoZXJldW1IREtleShoZGtleV8xLkhES2V5LmZyb21FeHRlbmRlZEtleShiYXNlNThLZXkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJJUDMyIGV4dGVuZGVkIHByaXZhdGUga2V5ICh4cHJ2KVxuICAgICAqL1xuICAgIHByaXZhdGVFeHRlbmRlZEtleSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9oZGtleS5wcml2YXRlRXh0ZW5kZWRLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBpcyBhIHB1YmxpYyBrZXkgb25seSB3YWxsZXQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faGRrZXkucHJpdmF0ZUV4dGVuZGVkS2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBCSVAzMiBleHRlbmRlZCBwdWJsaWMga2V5ICh4cHViKVxuICAgICAqL1xuICAgIHB1YmxpY0V4dGVuZGVkS2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGRrZXkucHVibGljRXh0ZW5kZWRLZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlcml2ZXMgYSBub2RlIGJhc2VkIG9uIGEgcGF0aCAoZS5nLiBtLzQ0Jy8wJy8wLzEpXG4gICAgICovXG4gICAgZGVyaXZlUGF0aChwYXRoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXRoZXJldW1IREtleSh0aGlzLl9oZGtleS5kZXJpdmUocGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXJpdmUgYSBub2RlIGJhc2VkIG9uIGEgY2hpbGQgaW5kZXhcbiAgICAgKi9cbiAgICBkZXJpdmVDaGlsZChpbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IEV0aGVyZXVtSERLZXkodGhpcy5faGRrZXkuZGVyaXZlQ2hpbGQoaW5kZXgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgYFdhbGxldGAgaW5zdGFuY2UgYXMgc2VlbiBhYm92ZVxuICAgICAqL1xuICAgIGdldFdhbGxldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hka2V5Ll9wcml2YXRlS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0LmZyb21Qcml2YXRlS2V5KHRoaXMuX2hka2V5Ll9wcml2YXRlS2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0LmZyb21QdWJsaWNLZXkodGhpcy5faGRrZXkuX3B1YmxpY0tleSwgdHJ1ZSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRXRoZXJldW1IREtleTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhka2V5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-wallet/dist/hdkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-wallet/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/ethereumjs-wallet/dist/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.thirdparty = exports.hdkey = void 0;\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nconst ethereumjs_util_1 = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/ethereumjs-util/dist/index.js\");\nconst scrypt_js_1 = __webpack_require__(/*! scrypt-js */ \"(ssr)/./node_modules/scrypt-js/scrypt.js\");\nvar hdkey_1 = __webpack_require__(/*! ./hdkey */ \"(ssr)/./node_modules/ethereumjs-wallet/dist/hdkey.js\");\nObject.defineProperty(exports, \"hdkey\", ({ enumerable: true, get: function () { return __importDefault(hdkey_1).default; } }));\nvar thirdparty_1 = __webpack_require__(/*! ./thirdparty */ \"(ssr)/./node_modules/ethereumjs-wallet/dist/thirdparty.js\");\nObject.defineProperty(exports, \"thirdparty\", ({ enumerable: true, get: function () { return __importDefault(thirdparty_1).default; } }));\nconst bs58check = __webpack_require__(/*! bs58check */ \"(ssr)/./node_modules/bs58check/index.js\");\nconst randomBytes = __webpack_require__(/*! randombytes */ \"(ssr)/./node_modules/randombytes/index.js\");\nconst uuidv4 = (__webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\").v4);\nfunction validateHexString(paramName, str, length) {\n    if (str.toLowerCase().startsWith('0x')) {\n        str = str.slice(2);\n    }\n    if (!str && !length) {\n        return str;\n    }\n    if (length % 2) {\n        throw new Error(`Invalid length argument, must be an even number`);\n    }\n    if (typeof length === 'number' && str.length !== length) {\n        throw new Error(`Invalid ${paramName}, string must be ${length} hex characters`);\n    }\n    if (!/^([0-9a-f]{2})+$/i.test(str)) {\n        const howMany = typeof length === 'number' ? length : 'empty or a non-zero even number of';\n        throw new Error(`Invalid ${paramName}, string must be ${howMany} hex characters`);\n    }\n    return str;\n}\nfunction validateBuffer(paramName, buff, length) {\n    if (!Buffer.isBuffer(buff)) {\n        const howManyHex = typeof length === 'number' ? `${length * 2}` : 'empty or a non-zero even number of';\n        const howManyBytes = typeof length === 'number' ? ` (${length} bytes)` : '';\n        throw new Error(`Invalid ${paramName}, must be a string (${howManyHex} hex characters) or buffer${howManyBytes}`);\n    }\n    if (typeof length === 'number' && buff.length !== length) {\n        throw new Error(`Invalid ${paramName}, buffer must be ${length} bytes`);\n    }\n    return buff;\n}\nfunction mergeToV3ParamsWithDefaults(params) {\n    const v3Defaults = {\n        cipher: 'aes-128-ctr',\n        kdf: 'scrypt',\n        salt: randomBytes(32),\n        iv: randomBytes(16),\n        uuid: randomBytes(16),\n        dklen: 32,\n        c: 262144,\n        n: 262144,\n        r: 8,\n        p: 1,\n    };\n    if (!params) {\n        return v3Defaults;\n    }\n    if (typeof params.salt === 'string') {\n        params.salt = Buffer.from(validateHexString('salt', params.salt), 'hex');\n    }\n    if (typeof params.iv === 'string') {\n        params.iv = Buffer.from(validateHexString('iv', params.iv, 32), 'hex');\n    }\n    if (typeof params.uuid === 'string') {\n        params.uuid = Buffer.from(validateHexString('uuid', params.uuid, 32), 'hex');\n    }\n    if (params.salt) {\n        validateBuffer('salt', params.salt);\n    }\n    if (params.iv) {\n        validateBuffer('iv', params.iv, 16);\n    }\n    if (params.uuid) {\n        validateBuffer('uuid', params.uuid, 16);\n    }\n    return Object.assign(Object.assign({}, v3Defaults), params);\n}\nfunction kdfParamsForPBKDF(opts) {\n    return {\n        dklen: opts.dklen,\n        salt: opts.salt,\n        c: opts.c,\n        prf: 'hmac-sha256',\n    };\n}\nfunction kdfParamsForScrypt(opts) {\n    return {\n        dklen: opts.dklen,\n        salt: opts.salt,\n        n: opts.n,\n        r: opts.r,\n        p: opts.p,\n    };\n}\n// wallet implementation\nclass Wallet {\n    constructor(privateKey, publicKey = undefined) {\n        this.privateKey = privateKey;\n        this.publicKey = publicKey;\n        if (privateKey && publicKey) {\n            throw new Error('Cannot supply both a private and a public key to the constructor');\n        }\n        if (privateKey && !(0, ethereumjs_util_1.isValidPrivate)(privateKey)) {\n            throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');\n        }\n        if (publicKey && !(0, ethereumjs_util_1.isValidPublic)(publicKey)) {\n            throw new Error('Invalid public key');\n        }\n    }\n    // static methods\n    /**\n     * Create an instance based on a new random key.\n     *\n     * @param icapDirect setting this to `true` will generate an address suitable for the `ICAP Direct mode`\n     */\n    static generate(icapDirect = false) {\n        if (icapDirect) {\n            const max = new ethereumjs_util_1.BN('088f924eeceeda7fe92e1f5b0fffffffffffffff', 16);\n            while (true) {\n                const privateKey = randomBytes(32);\n                if (new ethereumjs_util_1.BN((0, ethereumjs_util_1.privateToAddress)(privateKey)).lte(max)) {\n                    return new Wallet(privateKey);\n                }\n            }\n        }\n        else {\n            return new Wallet(randomBytes(32));\n        }\n    }\n    /**\n     * Create an instance where the address is valid against the supplied pattern (**this will be very slow**)\n     */\n    static generateVanityAddress(pattern) {\n        if (!(pattern instanceof RegExp)) {\n            pattern = new RegExp(pattern);\n        }\n        while (true) {\n            const privateKey = randomBytes(32);\n            const address = (0, ethereumjs_util_1.privateToAddress)(privateKey);\n            if (pattern.test(address.toString('hex'))) {\n                return new Wallet(privateKey);\n            }\n        }\n    }\n    /**\n     * Create an instance based on a public key (certain methods will not be available)\n     *\n     * This method only accepts uncompressed Ethereum-style public keys, unless\n     * the `nonStrict` flag is set to true.\n     */\n    static fromPublicKey(publicKey, nonStrict = false) {\n        if (nonStrict) {\n            publicKey = (0, ethereumjs_util_1.importPublic)(publicKey);\n        }\n        return new Wallet(undefined, publicKey);\n    }\n    /**\n     * Create an instance based on a BIP32 extended public key (xpub)\n     */\n    static fromExtendedPublicKey(extendedPublicKey) {\n        if (extendedPublicKey.slice(0, 4) !== 'xpub') {\n            throw new Error('Not an extended public key');\n        }\n        const publicKey = bs58check.decode(extendedPublicKey).slice(45);\n        // Convert to an Ethereum public key\n        return Wallet.fromPublicKey(publicKey, true);\n    }\n    /**\n     * Create an instance based on a raw private key\n     */\n    static fromPrivateKey(privateKey) {\n        return new Wallet(privateKey);\n    }\n    /**\n     * Create an instance based on a BIP32 extended private key (xprv)\n     */\n    static fromExtendedPrivateKey(extendedPrivateKey) {\n        if (extendedPrivateKey.slice(0, 4) !== 'xprv') {\n            throw new Error('Not an extended private key');\n        }\n        const tmp = bs58check.decode(extendedPrivateKey);\n        if (tmp[45] !== 0) {\n            throw new Error('Invalid extended private key');\n        }\n        return Wallet.fromPrivateKey(tmp.slice(46));\n    }\n    /**\n     * Import a wallet (Version 1 of the Ethereum wallet format).\n     *\n     * @param input A JSON serialized string, or an object representing V1 Keystore.\n     * @param password The keystore password.\n     */\n    static async fromV1(input, password) {\n        const json = typeof input === 'object' ? input : JSON.parse(input);\n        if (json.Version !== '1') {\n            throw new Error('Not a V1 Wallet');\n        }\n        if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {\n            throw new Error('Unsupported key derivation scheme');\n        }\n        const kdfparams = json.Crypto.KeyHeader.KdfParams;\n        const derivedKey = await (0, scrypt_js_1.scrypt)(Buffer.from(password), Buffer.from(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);\n        const ciphertext = Buffer.from(json.Crypto.CipherText, 'hex');\n        const mac = (0, ethereumjs_util_1.keccak256)(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n        if (mac.toString('hex') !== json.Crypto.MAC) {\n            throw new Error('Key derivation failed - possibly wrong passphrase');\n        }\n        const decipher = crypto.createDecipheriv('aes-128-cbc', (0, ethereumjs_util_1.keccak256)(derivedKey.slice(0, 16)).slice(0, 16), Buffer.from(json.Crypto.IV, 'hex'));\n        const seed = runCipherBuffer(decipher, ciphertext);\n        return new Wallet(seed);\n    }\n    /**\n     * Import a wallet (Version 3 of the Ethereum wallet format). Set `nonStrict` true to accept files with mixed-caps.\n     *\n     * @param input A JSON serialized string, or an object representing V3 Keystore.\n     * @param password The keystore password.\n     */\n    static async fromV3(input, password, nonStrict = false) {\n        const json = typeof input === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);\n        if (json.version !== 3) {\n            throw new Error('Not a V3 wallet');\n        }\n        let derivedKey, kdfparams;\n        if (json.crypto.kdf === 'scrypt') {\n            kdfparams = json.crypto.kdfparams;\n            // FIXME: support progress reporting callback\n            derivedKey = await (0, scrypt_js_1.scrypt)(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n        }\n        else if (json.crypto.kdf === 'pbkdf2') {\n            kdfparams = json.crypto.kdfparams;\n            if (kdfparams.prf !== 'hmac-sha256') {\n                throw new Error('Unsupported parameters to PBKDF2');\n            }\n            derivedKey = crypto.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n        }\n        else {\n            throw new Error('Unsupported key derivation scheme');\n        }\n        const ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n        const mac = (0, ethereumjs_util_1.keccak256)(Buffer.concat([Buffer.from(derivedKey.slice(16, 32)), ciphertext]));\n        if (mac.toString('hex') !== json.crypto.mac) {\n            throw new Error('Key derivation failed - possibly wrong passphrase');\n        }\n        const decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n        const seed = runCipherBuffer(decipher, ciphertext);\n        return new Wallet(seed);\n    }\n    /*\n     * Import an Ethereum Pre Sale wallet.\n     * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py\n     * JSON fields: encseed, ethaddr, btcaddr, email\n     *\n     * @param input A JSON serialized string, or an object representing EthSale Keystore.\n     * @param password The keystore password.\n     */\n    static fromEthSale(input, password) {\n        const json = typeof input === 'object' ? input : JSON.parse(input);\n        const encseed = Buffer.from(json.encseed, 'hex');\n        // key derivation\n        const derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);\n        // seed decoding (IV is first 16 bytes)\n        // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally\n        //       see also http://stackoverflow.com/a/31614770/4964819\n        const decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));\n        const seed = runCipherBuffer(decipher, encseed.slice(16));\n        const wallet = new Wallet((0, ethereumjs_util_1.keccak256)(seed));\n        if (wallet.getAddress().toString('hex') !== json.ethaddr) {\n            throw new Error('Decoded key mismatch - possibly wrong passphrase');\n        }\n        return wallet;\n    }\n    // private getters\n    /**\n     * Returns the wallet's public key.\n     */\n    get pubKey() {\n        if (!keyExists(this.publicKey)) {\n            this.publicKey = (0, ethereumjs_util_1.privateToPublic)(this.privateKey);\n        }\n        return this.publicKey;\n    }\n    /**\n     * Returns the wallet's private key.\n     */\n    get privKey() {\n        if (!keyExists(this.privateKey)) {\n            throw new Error('This is a public key only wallet');\n        }\n        return this.privateKey;\n    }\n    // public instance methods\n    /**\n     * Returns the wallet's private key.\n     *\n     */\n    // tslint:disable-next-line\n    getPrivateKey() {\n        return this.privKey;\n    }\n    getPrivateKeyString() {\n        return (0, ethereumjs_util_1.bufferToHex)(this.privKey);\n    }\n    /**\n     * Returns the wallet's public key.\n     */\n    // tslint:disable-next-line\n    getPublicKey() {\n        return this.pubKey;\n    }\n    /**\n     * Returns the wallet's public key as a \"0x\" prefixed hex string\n     */\n    getPublicKeyString() {\n        return (0, ethereumjs_util_1.bufferToHex)(this.getPublicKey());\n    }\n    /**\n     * Returns the wallet's address.\n     */\n    getAddress() {\n        return (0, ethereumjs_util_1.publicToAddress)(this.pubKey);\n    }\n    /**\n     * Returns the wallet's address as a \"0x\" prefixed hex string\n     */\n    getAddressString() {\n        return (0, ethereumjs_util_1.bufferToHex)(this.getAddress());\n    }\n    /**\n     * Returns the wallet's private key as a \"0x\" prefixed hex string checksummed\n     * according to [EIP 55](https://github.com/ethereum/EIPs/issues/55).\n     */\n    getChecksumAddressString() {\n        return (0, ethereumjs_util_1.toChecksumAddress)(this.getAddressString());\n    }\n    /**\n     * Returns an Etherem Version 3 Keystore Format object representing the wallet\n     *\n     * @param password The password used to encrypt the Keystore.\n     * @param opts The options for the keystore. See [its spec](https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition) for more info.\n     */\n    async toV3(password, opts) {\n        if (!keyExists(this.privateKey)) {\n            throw new Error('This is a public key only wallet');\n        }\n        const v3Params = mergeToV3ParamsWithDefaults(opts);\n        let kdfParams;\n        let derivedKey;\n        switch (v3Params.kdf) {\n            case \"pbkdf2\" /* PBKDF */:\n                kdfParams = kdfParamsForPBKDF(v3Params);\n                derivedKey = crypto.pbkdf2Sync(Buffer.from(password), kdfParams.salt, kdfParams.c, kdfParams.dklen, 'sha256');\n                break;\n            case \"scrypt\" /* Scrypt */:\n                kdfParams = kdfParamsForScrypt(v3Params);\n                // FIXME: support progress reporting callback\n                derivedKey = await (0, scrypt_js_1.scrypt)(Buffer.from(password), kdfParams.salt, kdfParams.n, kdfParams.r, kdfParams.p, kdfParams.dklen);\n                break;\n            default:\n                throw new Error('Unsupported kdf');\n        }\n        const cipher = crypto.createCipheriv(v3Params.cipher, derivedKey.slice(0, 16), v3Params.iv);\n        if (!cipher) {\n            throw new Error('Unsupported cipher');\n        }\n        const ciphertext = runCipherBuffer(cipher, this.privKey);\n        const mac = (0, ethereumjs_util_1.keccak256)(Buffer.concat([Buffer.from(derivedKey.slice(16, 32)), Buffer.from(ciphertext)]));\n        return {\n            version: 3,\n            id: uuidv4({ random: v3Params.uuid }),\n            // @ts-ignore - the official V3 keystore spec omits the address key\n            address: this.getAddress().toString('hex'),\n            crypto: {\n                ciphertext: ciphertext.toString('hex'),\n                cipherparams: { iv: v3Params.iv.toString('hex') },\n                cipher: v3Params.cipher,\n                kdf: v3Params.kdf,\n                kdfparams: Object.assign(Object.assign({}, kdfParams), { salt: kdfParams.salt.toString('hex') }),\n                mac: mac.toString('hex'),\n            },\n        };\n    }\n    /**\n     * Return the suggested filename for V3 keystores.\n     */\n    getV3Filename(timestamp) {\n        /*\n         * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting\n         * is a pain in Javascript, everbody knows that. We could use moment.js,\n         * but decide to do it manually in order to save space.\n         *\n         * toJSON() returns a pretty close version, so let's use it. It is not UTC though,\n         * but does it really matter?\n         *\n         * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819\n         *\n         */\n        const ts = timestamp ? new Date(timestamp) : new Date();\n        return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');\n    }\n    async toV3String(password, opts) {\n        return JSON.stringify(await this.toV3(password, opts));\n    }\n}\nexports[\"default\"] = Wallet;\n// helpers\nfunction runCipherBuffer(cipher, data) {\n    return Buffer.concat([cipher.update(data), cipher.final()]);\n}\nfunction keyExists(k) {\n    return k !== undefined && k !== null;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-wallet/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-wallet/dist/thirdparty.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethereumjs-wallet/dist/thirdparty.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromQuorumWallet = exports.fromKryptoKit = exports.fromEtherCamp = exports.fromEtherWallet = void 0;\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nconst ethereumjs_util_1 = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/ethereumjs-util/dist/index.js\");\nconst scrypt_js_1 = __webpack_require__(/*! scrypt-js */ \"(ssr)/./node_modules/scrypt-js/scrypt.js\");\nconst index_1 = __importDefault(__webpack_require__(/*! ./index */ \"(ssr)/./node_modules/ethereumjs-wallet/dist/index.js\"));\nconst utf8 = __webpack_require__(/*! utf8 */ \"(ssr)/./node_modules/utf8/utf8.js\");\nconst aesjs = __webpack_require__(/*! aes-js */ \"(ssr)/./node_modules/aes-js/index.js\");\nfunction runCipherBuffer(cipher, data) {\n    return Buffer.concat([cipher.update(data), cipher.final()]);\n}\nconst evpKdfDefaults = {\n    count: 1,\n    keysize: 16,\n    ivsize: 16,\n    digest: 'md5',\n};\nfunction mergeEvpKdfOptsWithDefaults(opts) {\n    if (!opts) {\n        return evpKdfDefaults;\n    }\n    return {\n        count: opts.count || evpKdfDefaults.count,\n        keysize: opts.keysize || evpKdfDefaults.keysize,\n        ivsize: opts.ivsize || evpKdfDefaults.ivsize,\n        digest: opts.digest || evpKdfDefaults.digest,\n    };\n}\n/*\n * opts:\n * - digest - digest algorithm, defaults to md5\n * - count - hash iterations\n * - keysize - desired key size\n * - ivsize - desired IV size\n *\n * Algorithm form https://www.openssl.org/docs/manmaster/crypto/EVP_BytesToKey.html\n *\n * FIXME: not optimised at all\n */\nfunction evp_kdf(data, salt, opts) {\n    const params = mergeEvpKdfOptsWithDefaults(opts);\n    // A single EVP iteration, returns `D_i`, where block equlas to `D_(i-1)`\n    function iter(block) {\n        let hash = crypto.createHash(params.digest);\n        hash.update(block);\n        hash.update(data);\n        hash.update(salt);\n        block = hash.digest();\n        for (let i = 1, len = params.count; i < len; i++) {\n            hash = crypto.createHash(params.digest);\n            hash.update(block);\n            block = hash.digest();\n        }\n        return block;\n    }\n    const ret = [];\n    let i = 0;\n    while (Buffer.concat(ret).length < params.keysize + params.ivsize) {\n        ret[i] = iter(i === 0 ? Buffer.alloc(0) : ret[i - 1]);\n        i++;\n    }\n    const tmp = Buffer.concat(ret);\n    return {\n        key: tmp.slice(0, params.keysize),\n        iv: tmp.slice(params.keysize, params.keysize + params.ivsize),\n    };\n}\n// http://stackoverflow.com/questions/25288311/cryptojs-aes-pattern-always-ends-with\nfunction decodeCryptojsSalt(input) {\n    const ciphertext = Buffer.from(input, 'base64');\n    if (ciphertext.slice(0, 8).toString() === 'Salted__') {\n        return {\n            salt: ciphertext.slice(8, 16),\n            ciphertext: ciphertext.slice(16),\n        };\n    }\n    return { ciphertext };\n}\n/*\n * Third Party API: Import a wallet generated by EtherWallet\n * This wallet format is created by https://github.com/SilentCicero/ethereumjs-accounts\n * and used on https://www.myetherwallet.com/\n */\nfunction fromEtherWallet(input, password) {\n    const json = typeof input === 'object' ? input : JSON.parse(input);\n    let privateKey;\n    if (!json.locked) {\n        if (json.private.length !== 64) {\n            throw new Error('Invalid private key length');\n        }\n        privateKey = Buffer.from(json.private, 'hex');\n    }\n    else {\n        if (typeof password !== 'string') {\n            throw new Error('Password required');\n        }\n        if (password.length < 7) {\n            throw new Error('Password must be at least 7 characters');\n        }\n        // the \"encrypted\" version has the low 4 bytes\n        // of the hash of the address appended\n        const hash = json.encrypted ? json.private.slice(0, 128) : json.private;\n        // decode openssl ciphertext + salt encoding\n        const cipher = decodeCryptojsSalt(hash);\n        if (!cipher.salt) {\n            throw new Error('Unsupported EtherWallet key format');\n        }\n        // derive key/iv using OpenSSL EVP as implemented in CryptoJS\n        const evp = evp_kdf(Buffer.from(password), cipher.salt, { keysize: 32, ivsize: 16 });\n        const decipher = crypto.createDecipheriv('aes-256-cbc', evp.key, evp.iv);\n        privateKey = runCipherBuffer(decipher, Buffer.from(cipher.ciphertext));\n        // NOTE: yes, they've run it through UTF8\n        privateKey = Buffer.from(utf8.decode(privateKey.toString()), 'hex');\n    }\n    const wallet = new index_1.default(privateKey);\n    if (wallet.getAddressString() !== json.address) {\n        throw new Error('Invalid private key or address');\n    }\n    return wallet;\n}\nexports.fromEtherWallet = fromEtherWallet;\n/**\n * Third Party API: Import a brain wallet used by Ether.Camp\n */\nfunction fromEtherCamp(passphrase) {\n    return new index_1.default((0, ethereumjs_util_1.keccak256)(Buffer.from(passphrase)));\n}\nexports.fromEtherCamp = fromEtherCamp;\n/**\n * Third Party API: Import a wallet from a KryptoKit seed\n */\nasync function fromKryptoKit(entropy, password) {\n    function kryptoKitBrokenScryptSeed(buf) {\n        // js-scrypt calls `Buffer.from(String(salt), 'utf8')` on the seed even though it is a buffer\n        //\n        // The `buffer`` implementation used does the below transformation (doesn't matches the current version):\n        // https://github.com/feross/buffer/blob/67c61181b938b17d10dbfc0a545f713b8bd59de8/index.js\n        function decodeUtf8Char(str) {\n            try {\n                return decodeURIComponent(str);\n            }\n            catch (err) {\n                return String.fromCharCode(0xfffd); // UTF 8 invalid char\n            }\n        }\n        let res = '', tmp = '';\n        for (let i = 0; i < buf.length; i++) {\n            if (buf[i] <= 0x7f) {\n                res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);\n                tmp = '';\n            }\n            else {\n                tmp += '%' + buf[i].toString(16);\n            }\n        }\n        return Buffer.from(res + decodeUtf8Char(tmp));\n    }\n    if (entropy[0] === '#') {\n        entropy = entropy.slice(1);\n    }\n    const type = entropy[0];\n    entropy = entropy.slice(1);\n    let privateKey;\n    if (type === 'd') {\n        privateKey = (0, ethereumjs_util_1.sha256)((0, ethereumjs_util_1.toBuffer)(entropy));\n    }\n    else if (type === 'q') {\n        if (typeof password !== 'string') {\n            throw new Error('Password required');\n        }\n        const encryptedSeed = (0, ethereumjs_util_1.sha256)(Buffer.from(entropy.slice(0, 30)));\n        const checksum = entropy.slice(30, 46);\n        const salt = kryptoKitBrokenScryptSeed(encryptedSeed);\n        const aesKey = await (0, scrypt_js_1.scrypt)(Buffer.from(password, 'utf8'), salt, 16384, 8, 1, 32);\n        /* FIXME: try to use `crypto` instead of `aesjs`\n    \n        // NOTE: ECB doesn't use the IV, so it can be anything\n        var decipher = crypto.createDecipheriv(\"aes-256-ecb\", aesKey, Buffer.from(0))\n    \n        // FIXME: this is a clear abuse, but seems to match how ECB in aesjs works\n        privKey = Buffer.concat([\n          decipher.update(encryptedSeed).slice(0, 16),\n          decipher.update(encryptedSeed).slice(0, 16),\n        ])\n        */\n        const decipher = new aesjs.ModeOfOperation.ecb(aesKey);\n        /* decrypt returns an Uint8Array, perhaps there is a better way to concatenate */\n        privateKey = Buffer.concat([\n            Buffer.from(decipher.decrypt(encryptedSeed.slice(0, 16))),\n            Buffer.from(decipher.decrypt(encryptedSeed.slice(16, 32))),\n        ]);\n        if (checksum.length > 0) {\n            if (checksum !== (0, ethereumjs_util_1.sha256)((0, ethereumjs_util_1.sha256)(privateKey)).slice(0, 8).toString('hex')) {\n                throw new Error('Failed to decrypt input - possibly invalid passphrase');\n            }\n        }\n    }\n    else {\n        throw new Error('Unsupported or invalid entropy type');\n    }\n    return new index_1.default(privateKey);\n}\nexports.fromKryptoKit = fromKryptoKit;\n/**\n * Third Party API: Import a brain wallet used by Quorum Wallet\n */\nfunction fromQuorumWallet(passphrase, userid) {\n    if (passphrase.length < 10) {\n        throw new Error('Passphrase must be at least 10 characters');\n    }\n    if (userid.length < 10) {\n        throw new Error('User id must be at least 10 characters');\n    }\n    const merged = passphrase + userid;\n    const seed = crypto.pbkdf2Sync(merged, merged, 2000, 32, 'sha256');\n    return new index_1.default(seed);\n}\nexports.fromQuorumWallet = fromQuorumWallet;\nconst Thirdparty = {\n    fromEtherWallet,\n    fromEtherCamp,\n    fromKryptoKit,\n    fromQuorumWallet,\n};\nexports[\"default\"] = Thirdparty;\n//# sourceMappingURL=thirdparty.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-wallet/dist/thirdparty.js\n");

/***/ })

};
;